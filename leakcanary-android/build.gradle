apply plugin: 'maven'

version rootProject.ext.VERSION_NAME
group rootProject.ext.GROUP

buildscript {
  repositories {
    mavenCentral()
  }
}

apply plugin: 'com.android.library'

repositories {
  mavenCentral()
}

dependencies {
  compile project(':leakcanary-analyzer')
}

def gitSha() {
  return 'git rev-parse --short HEAD'.execute().text.trim()
}

android {
  resourcePrefix 'leak_canary_'
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    buildConfigField "String", "LIBRARY_VERSION", "\"${rootProject.ext.VERSION_NAME}\""
    buildConfigField "String", "GIT_SHA", "\"${gitSha()}\""
    consumerProguardFiles 'consumer-proguard-rules.pro'
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked"
  options.compilerArgs << "-Xlint:deprecation"
}

allprojects {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}

uploadArchives {
  repositories {
    mavenDeployer {
      pom {
        groupId = 'com.squareup.leakcanary'
        artifactId = 'leakcanary-android'
        version = rootProject.ext.VERSION_NAME
      }
      repository(url: 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath)
    }
  }
}

apply from: rootProject.file('gradle/checkstyle.gradle')
